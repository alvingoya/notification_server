# location /game99-pay-app/sse {
#     proxy_http_version 1.1;
#     proxy_set_header Host $host;
#     proxy_set_header Agent '9900';
#     proxy_set_header Connection "";
#     proxy_buffering off;
#     proxy_cache off;
#     chunked_transfer_encoding off;
#     proxy_read_timeout 120;
#     proxy_connect_timeout 120;
#     proxy_send_timeout 120;
#     proxy_pass http://game99-pay-app-server/sse;
# }

location ~ /subscribe {
    more_set_input_headers -t text/event-stream "Cache-control: no-cache";
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header Connection "";
    proxy_buffering off;
    proxy_cache off;
    chunked_transfer_encoding off;
    rewrite ^.*$ /sse last;
}

location ~ /sse {
    internal;
    default_type text/event-stream;
    lua_check_client_abort on;

    content_by_lua_block {
        local cjson = require "cjson"

        local result, err = red:get("pay:channel:10060")
        if not result then
            ngx.say("Failed to get key: ", err)
            return
        end
        local decoded = cjson.decode(result);

        local random = math.random
        local function uuid()
            local template ='xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'
            return string.gsub(template, '[xy]', function (c)
                local v = (c == 'x') and random(0, 0xf) or random(8, 0xb)
                return string.format('%x', v)
            end)
        end
        math.randomseed(ngx.time())

        local function cleanup() ngx.log(ngx.ALERT, "Connection closed") ngx.exit(ngx.OK)  end

        ngx.print(
            "id: " .. uuid() .. "\n" ..
            "event: CONNECTION\n" ..
            "data: Connection success\n\n"
        )
        while true do
            ngx.flush() -- ngx.flush(true) when sending response
            ngx.on_abort(cleanup)
            ngx.sleep(1)
        end

        --ngx.say("event: NOTIFICATION\n\n" )
        --ngx.say("data: " .. cjson.encode(result) .. "\n\n")
        --ngx.flush(true)
        --ngx.sleep(1)
        --local count = 0
        --while true do
        --    ngx.sleep(1)
        --    count = count + 1
        --    ngx.say("event: NOTIFICATION\r\n" )
        --    ngx.say("data: " .. cjson.encode(result) .. "\r\n")
        --    ngx.flush(true)
        --end
    }
}
